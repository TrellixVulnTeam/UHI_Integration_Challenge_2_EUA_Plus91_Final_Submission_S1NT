'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core$1 = require('@angular/core');
var core = require('@awesome-cordova-plugins/core');
var rxjs = require('rxjs');

var ɵngcc0 = require('@angular/core');
var Geolocation = /** @class */ (function (_super) {
    tslib.__extends(Geolocation, _super);
    function Geolocation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Geolocation.prototype.getCurrentPosition = function (options) { return core.cordova(this, "getCurrentPosition", { "callbackOrder": "reverse" }, arguments); };
    /**
     * Watch the current device's position.  Clear the watch by unsubscribing from
     * Observable changes.
     *
     * ```typescript
     * const subscription = this.geolocation.watchPosition()
     *                               .filter((p) => p.coords !== undefined) //Filter Out Errors
     *                               .subscribe(position => {
     *   console.log(position.coords.longitude + ' ' + position.coords.latitude);
     * });
     *
     * // To stop notifications
     * subscription.unsubscribe();
     * ```
     *
     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).
     * @returns {Observable<Geoposition | PositionError>} Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.
     */
    Geolocation.prototype.watchPosition = function (options) {
        return new rxjs.Observable(function (observer) {
            var watchId = navigator.geolocation.watchPosition(observer.next.bind(observer), observer.next.bind(observer), options);
            return function () { return navigator.geolocation.clearWatch(watchId); };
        });
    };
    Geolocation.pluginName = "Geolocation";
    Geolocation.plugin = "cordova-plugin-geolocation";
    Geolocation.pluginRef = "navigator.geolocation";
    Geolocation.repo = "https://github.com/apache/cordova-plugin-geolocation";
    Geolocation.install = "ionic cordova plugin add cordova-plugin-geolocation --variable GEOLOCATION_USAGE_DESCRIPTION=\"To locate you\"";
    Geolocation.installVariables = ["GEOLOCATION_USAGE_DESCRIPTION"];
    Geolocation.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
Geolocation.ɵfac = /*@__PURE__*/ function () { var ɵGeolocation_BaseFactory; return function Geolocation_Factory(t) { return (ɵGeolocation_BaseFactory || (ɵGeolocation_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Geolocation)))(t || Geolocation); }; }();
Geolocation.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: Geolocation, factory: function (t) { return Geolocation.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Geolocation, [{
        type: core$1.Injectable
    }], null, null); })();
    return Geolocation;
}(core.AwesomeCordovaNativePlugin));

exports.Geolocation = Geolocation;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OzswQkFHTTtBQUNOO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGNvcmUkMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnKTtcbnZhciByeGpzID0gcmVxdWlyZSgncnhqcycpO1xuXG52YXIgR2VvbG9jYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKEdlb2xvY2F0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEdlb2xvY2F0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEdlb2xvY2F0aW9uLnByb3RvdHlwZS5nZXRDdXJyZW50UG9zaXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm4gY29yZS5jb3Jkb3ZhKHRoaXMsIFwiZ2V0Q3VycmVudFBvc2l0aW9uXCIsIHsgXCJjYWxsYmFja09yZGVyXCI6IFwicmV2ZXJzZVwiIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgLyoqXG4gICAgICogV2F0Y2ggdGhlIGN1cnJlbnQgZGV2aWNlJ3MgcG9zaXRpb24uICBDbGVhciB0aGUgd2F0Y2ggYnkgdW5zdWJzY3JpYmluZyBmcm9tXG4gICAgICogT2JzZXJ2YWJsZSBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbigpXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigocCkgPT4gcC5jb29yZHMgIT09IHVuZGVmaW5lZCkgLy9GaWx0ZXIgT3V0IEVycm9yc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUocG9zaXRpb24gPT4ge1xuICAgICAqICAgY29uc29sZS5sb2cocG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSArICcgJyArIHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiAvLyBUbyBzdG9wIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7R2VvbG9jYXRpb25PcHRpb25zfSBvcHRpb25zICBUaGUgW2dlb2xvY2F0aW9uIG9wdGlvbnNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Qb3NpdGlvbk9wdGlvbnMpLlxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPEdlb3Bvc2l0aW9uIHwgUG9zaXRpb25FcnJvcj59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIHdpdGggdGhlIFtwb3NpdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uKSBvZiB0aGUgZGV2aWNlLCBvciBlcnJvcnMuXG4gICAgICovXG4gICAgR2VvbG9jYXRpb24ucHJvdG90eXBlLndhdGNoUG9zaXRpb24gPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IHJ4anMuT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciB3YXRjaElkID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24ob2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSwgb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2god2F0Y2hJZCk7IH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgR2VvbG9jYXRpb24ucGx1Z2luTmFtZSA9IFwiR2VvbG9jYXRpb25cIjtcbiAgICBHZW9sb2NhdGlvbi5wbHVnaW4gPSBcImNvcmRvdmEtcGx1Z2luLWdlb2xvY2F0aW9uXCI7XG4gICAgR2VvbG9jYXRpb24ucGx1Z2luUmVmID0gXCJuYXZpZ2F0b3IuZ2VvbG9jYXRpb25cIjtcbiAgICBHZW9sb2NhdGlvbi5yZXBvID0gXCJodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWdlb2xvY2F0aW9uXCI7XG4gICAgR2VvbG9jYXRpb24uaW5zdGFsbCA9IFwiaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLWdlb2xvY2F0aW9uIC0tdmFyaWFibGUgR0VPTE9DQVRJT05fVVNBR0VfREVTQ1JJUFRJT049XFxcIlRvIGxvY2F0ZSB5b3VcXFwiXCI7XG4gICAgR2VvbG9jYXRpb24uaW5zdGFsbFZhcmlhYmxlcyA9IFtcIkdFT0xPQ0FUSU9OX1VTQUdFX0RFU0NSSVBUSU9OXCJdO1xuICAgIEdlb2xvY2F0aW9uLnBsYXRmb3JtcyA9IFtcIkFtYXpvbiBGaXJlIE9TXCIsIFwiQW5kcm9pZFwiLCBcIkJyb3dzZXJcIiwgXCJpT1NcIiwgXCJXaW5kb3dzXCJdO1xuICAgIEdlb2xvY2F0aW9uLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogY29yZSQxLkluamVjdGFibGUgfVxuICAgIF07XG4gICAgcmV0dXJuIEdlb2xvY2F0aW9uO1xufShjb3JlLkF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luKSk7XG5cbmV4cG9ydHMuR2VvbG9jYXRpb24gPSBHZW9sb2NhdGlvbjtcbiJdfQ==